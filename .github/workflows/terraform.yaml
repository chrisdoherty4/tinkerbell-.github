name: "Terraform"

on:
  push:
    branches:
      - 'master'
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yaml'
      - '.github/workflows/terraform_apply.yaml'
  pull_request:
    types: [opened, synchronize, reopened, labeled]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yaml'
      - '.github/workflows/terraform_apply.yaml'

jobs:
  terraform:
    defaults:
      run:
        working-directory: ./terraform
    name: "Terraform"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_version: 0.14.3

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        if: contains(github.event.pull_request.labels.*.name, 'ci-check/terraform') && github.event_name == 'pull_request'
        id: init
        run: terraform init

      - name: Terraform validate
        if: contains(github.event.pull_request.labels.*.name, 'ci-check/terraform') && github.event_name == 'pull_request'
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        if: contains(github.event.pull_request.labels.*.name, 'ci-check/terraform') && github.event_name == 'pull_request'
        run: terraform plan -no-color
        env:
          TF_VAR_github_token: ${{ secrets.TF_VAR_GITHUB_TOKEN }}
        continue-on-error: true

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`${process.env.PLAN}\`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: contains(github.event.pull_request.labels.*.name, 'ci-check/terraform') && steps.plan.outcome == 'failure'
        env:
          TF_VAR_github_token: ${{ secrets.TF_VAR_GITHUB_TOKEN }}
        run: exit 1
